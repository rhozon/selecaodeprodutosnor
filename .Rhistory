# Aplique o método Fuzzy TOPSIS
result <- FuzzyTOPSIS(decision_matrix, weights, optimization_direction)
library(FuzzyR)
# Crie uma matriz de decisão
decision_matrix <- matrix(c(risk_corn, risk_soy, return_corn, return_soy), nrow = 2)
# Defina os pesos para o risco e retorno. Aqui, assumimos que ambos são igualmente importantes
weights <- c(0.5, 0.5)
# Defina a direção da otimização. Aqui, assumimos que queremos minimizar o risco e maximizar o retorno
optimization_direction <- c("min", "max")
# Aplique o método TOPSIS
result <- fuzzy.topsis(decision_matrix, weights, optimization_direction)
library(quantmod)
library(FuzzyMCDM)
# Obtenha os dados de preços diários para milho e soja nos últimos 252 dias
end <- Sys.Date()
start <- end - 252
getSymbols("C", src = "yahoo", from = start, to = end)
getSymbols("S", src = "yahoo", from = start, to = end)
# Calcule os retornos diários
returns_corn <- dailyReturn(Cl(C))
returns_soy <- dailyReturn(Cl(S))
# Calcule o risco como o desvio padrão dos retornos
risk_corn <- sd(returns_corn)
risk_soy <- sd(returns_soy)
# Calcule o retorno como a média dos retornos
return_corn <- mean(returns_corn)
return_soy <- mean(returns_soy)
# Crie uma matriz de decisão
decision_matrix <- matrix(c(risk_corn, risk_soy, return_corn, return_soy), nrow = 2)
# Defina os pesos para o risco e retorno. Aqui, assumimos que ambos são igualmente importantes
weights <- c(0.5, 0.5)
# Defina a direção da otimização. Aqui, assumimos que queremos minimizar o risco e maximizar o retorno
optimization_direction <- c("min", "max")
# Aplique o método Fuzzy TOPSIS
result <- FuzzyTOPSISLinear(decision_matrix, weights, optimization_direction)
library(quantmod)
library(FuzzyMCDM)
# Obtenha os dados de preços diários para milho e soja nos últimos 252 dias
end <- Sys.Date()
start <- end - 252
getSymbols("C", src = "yahoo", from = start, to = end)
getSymbols("S", src = "yahoo", from = start, to = end)
# Calcule os retornos diários
returns_corn <- dailyReturn(Cl(C))
returns_soy <- dailyReturn(Cl(S))
# Calcule o risco como o desvio padrão dos retornos
risk_corn <- sd(returns_corn)
risk_soy <- sd(returns_soy)
# Calcule o retorno como a média dos retornos
return_corn <- mean(returns_corn)
return_soy <- mean(returns_soy)
# Crie uma matriz de decisão
decision_matrix <- matrix(c(risk_corn, risk_soy, return_corn, return_soy), nrow = 2, byrow = TRUE)
# Defina os pesos para o risco e retorno. Aqui, assumimos que ambos são igualmente importantes
weights <- c(0.5, 0.5)
# Defina a direção da otimização. Aqui, assumimos que queremos minimizar o risco e maximizar o retorno
optimization_direction <- c("min", "max")
# Aplique o método Fuzzy TOPSIS
result <- FuzzyTOPSISLinear(decision_matrix, weights, optimization_direction)
library(rugarch)
# Defina os pesos para o risco e retorno. Aqui, assumimos que ambos são igualmente importantes
weights <- c(0.5, 0.5
q
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("rmgarch")
install.packages("installr")
library(installr)
updateR()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("DecTools")
install.packages("DecTools")
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("bigmemory")
rmarkdown::render_site()
install.packages("biganalytics")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("CausalImpact")
install.packages("CausalImpact")
rmarkdown::render_site()
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
comment = NA
)
knitr::opts_chunk$set(comment = NA)    # Remove all coments # of R outputs
knitr::opts_chunk$set(warning = FALSE) # Remove all warnings # of R outputs
knitr::opts_chunk$set(message = FALSE) # Remove all messages # of R outputs
inicio <- "2014-01-01"
tratamento <- "2015-09-09" # Nao sabemos exatamente a data do evento, mas aproximadamente, conforme as noticias informaram
pos.tratamento <- as.Date(tratamento) + 1 # Dia posterior ao tratamento
fim <- "2015-12-31" # Padrao de data internacional ano, mes dia
periodo.pre <- as.Date(c(inicio, tratamento)) # Periodo pre intervencao
periodo.pos <- as.Date(c(pos.tratamento, fim)) # Periodo pos intervencao
library(dplyr)
library(tidyverse)
library(lubridate)
library(tseries)
library(dygraphs)
library(CausalImpact)
library(corrplot)
library(sarbcurrent)
library(strucchange)
library(changepoint)
Volkswagen <- get.hist.quote(
instrument = "VOW.DE",
start = inicio,
end = fim,
quote = "Close",
compression = "w" # d = daily frequency, w = weekly
)
class(Volkswagen)
#Facebook <- get.hist.quote(
#  instrument = "FB",
#  start = inicio,
#  end = fim,
#  quote = "Close",
#  compression = "w"
#)
Disney <- get.hist.quote(
instrument = "DIS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Novartis <- get.hist.quote(
instrument = "NVS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Carlsberg <- get.hist.quote(
instrument = "CARL-B.CO",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
cotacoes <- cbind(
Volkswagen,
#  Facebook,
Novartis,
Disney,
Carlsberg
)
dygraph( Volkswagen, group = "cotacoes" ) %>%
dyShading(from = "2015-09-01", to = "2015-09-30") %>%
dyAnnotation("2015-09-15", text = "A", tooltip = "Escândalo 'DieselGate'") %>%
dyAxis("x", drawGrid = TRUE) %>%
dyEvent("2015-09-01", "2015", labelLoc = "bottom") %>%
dyEvent("2015-09-30", "2015", labelLoc = "bottom") %>%
dyOptions(drawPoints = FALSE, pointSize = 2) %>% dyRangeSelector()
#dygraph( Facebook, group = "cotacoes" ) %>% dyRangeSelector()
dygraph( Disney, group = "cotacoes" ) %>% dyRangeSelector()
dygraph( Novartis, group = "cotacoes" ) %>% dyRangeSelector()
dygraph( Carlsberg, group = "cotacoes" ) %>% dyRangeSelector()
fstats_volks <- Fstats(Volkswagen ~ 1)
breakpoints(fstats_volks)
sctest(Volkswagen[,"Close"] ~ 1, type = "Chow", point = 89)
sctest(fstats_volks, type = "supF")
plot(fstats_volks)
bp.volks <- breakpoints(Volkswagen ~ 1)
summary(bp.volks)
teste_quebra_fech_int_conf <- confint(bp.volks)
plot(bp.volks)
lines(bp.volks)
lines(teste_quebra_fech_int_conf ) # RSS e BIC para as quebras na serie de precos
bp4 <- breakpoints(bp.volks, breaks = 4)
ocus.volks <- efp(Volkswagen ~ breakfactor(bp4), type= "OLS-CUSUM")
plot(ocus.volks)
correl <- window(cotacoes, start = inicio, end = tratamento)
cor(correl)
grupo_controle <- cbind(
Volkswagen,
Novartis,
Disney,
Carlsberg
) %>% na.omit()
impacto <- CausalImpact( data = grupo_controle, pre.period = periodo.pre, post.period = periodo.pos )
plot(impacto)
summary(impacto)
summary(impacto, "report")
Volkswagen <- get.hist.quote(
instrument = "VOW.DE",
start = inicio,
end = fim,
quote = "Close",
compression = "w" # d = daily frequency, w = weekly
)
class(Volkswagen)
Facebook <- get.hist.quote(
instrument = "ibm",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Disney <- get.hist.quote(
instrument = "DIS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Novartis <- get.hist.quote(
instrument = "NVS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Carlsberg <- get.hist.quote(
instrument = "CARL-B.CO",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Volkswagen <- get.hist.quote(
instrument = "VOW.DE",
start = inicio,
end = fim,
quote = "Close",
compression = "w" # d = daily frequency, w = weekly
)
class(Volkswagen)
Facebook <- get.hist.quote(
instrument = "FB",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Disney <- get.hist.quote(
instrument = "DIS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Novartis <- get.hist.quote(
instrument = "NVS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Carlsberg <- get.hist.quote(
instrument = "CARL-B.CO",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Volkswagen <- get.hist.quote(
instrument = "VOW.DE",
start = inicio,
end = fim,
quote = "Close",
compression = "w" # d = daily frequency, w = weekly
)
class(Volkswagen)
Facebook <- get.hist.quote(
instrument = "FB.MI",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Disney <- get.hist.quote(
instrument = "DIS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Novartis <- get.hist.quote(
instrument = "NVS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Carlsberg <- get.hist.quote(
instrument = "CARL-B.CO",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Volkswagen <- get.hist.quote(
instrument = "VOW.DE",
start = inicio,
end = fim,
quote = "Close",
compression = "w" # d = daily frequency, w = weekly
)
class(Volkswagen)
Facebook <- get.hist.quote(
instrument = "META",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Disney <- get.hist.quote(
instrument = "DIS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Novartis <- get.hist.quote(
instrument = "NVS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Carlsberg <- get.hist.quote(
instrument = "CARL-B.CO",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
knitr::opts_chunk$set(
echo = TRUE,
message = FALSE,
warning = FALSE,
comment = NA
)
knitr::opts_chunk$set(comment = NA)    # Remove all coments # of R outputs
knitr::opts_chunk$set(warning = FALSE) # Remove all warnings # of R outputs
knitr::opts_chunk$set(message = FALSE) # Remove all messages # of R outputs
inicio <- "2014-01-01"
tratamento <- "2015-09-09" # Nao sabemos exatamente a data do evento, mas aproximadamente, conforme as noticias informaram
pos.tratamento <- as.Date(tratamento) + 1 # Dia posterior ao tratamento
fim <- "2015-12-31" # Padrao de data internacional ano, mes dia
periodo.pre <- as.Date(c(inicio, tratamento)) # Periodo pre intervencao
periodo.pos <- as.Date(c(pos.tratamento, fim)) # Periodo pos intervencao
library(dplyr)
library(tidyverse)
library(lubridate)
library(tseries)
library(dygraphs)
library(CausalImpact)
library(corrplot)
library(sarbcurrent)
library(strucchange)
library(changepoint)
Volkswagen <- get.hist.quote(
instrument = "VOW.DE",
start = inicio,
end = fim,
quote = "Close",
compression = "w" # d = daily frequency, w = weekly
)
class(Volkswagen)
Facebook <- get.hist.quote(
instrument = "META",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Disney <- get.hist.quote(
instrument = "DIS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Novartis <- get.hist.quote(
instrument = "NVS",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
Carlsberg <- get.hist.quote(
instrument = "CARL-B.CO",
start = inicio,
end = fim,
quote = "Close",
compression = "w"
)
cotacoes <- cbind(
Volkswagen,
Facebook,
Novartis,
Disney,
Carlsberg
)
dygraph( Volkswagen, group = "cotacoes" ) %>%
dyShading(from = "2015-09-01", to = "2015-09-30") %>%
dyAnnotation("2015-09-15", text = "A", tooltip = "Escândalo 'DieselGate'") %>%
dyAxis("x", drawGrid = TRUE) %>%
dyEvent("2015-09-01", "2015", labelLoc = "bottom") %>%
dyEvent("2015-09-30", "2015", labelLoc = "bottom") %>%
dyOptions(drawPoints = FALSE, pointSize = 2) %>% dyRangeSelector()
dygraph( Facebook, group = "cotacoes" ) %>% dyRangeSelector()
dygraph( Disney, group = "cotacoes" ) %>% dyRangeSelector()
dygraph( Novartis, group = "cotacoes" ) %>% dyRangeSelector()
dygraph( Carlsberg, group = "cotacoes" ) %>% dyRangeSelector()
fstats_volks <- Fstats(Volkswagen ~ 1)
breakpoints(fstats_volks)
sctest(Volkswagen[,"Close"] ~ 1, type = "Chow", point = 89)
sctest(fstats_volks, type = "supF")
plot(fstats_volks)
bp.volks <- breakpoints(Volkswagen ~ 1)
summary(bp.volks)
teste_quebra_fech_int_conf <- confint(bp.volks)
plot(bp.volks)
lines(bp.volks)
lines(teste_quebra_fech_int_conf ) # RSS e BIC para as quebras na serie de precos
bp4 <- breakpoints(bp.volks, breaks = 4)
ocus.volks <- efp(Volkswagen ~ breakfactor(bp4), type= "OLS-CUSUM")
plot(ocus.volks)
correl <- window(cotacoes, start = inicio, end = tratamento)
cor(correl)
grupo_controle <- cbind(
Volkswagen,
Novartis,
Disney,
Carlsberg
) %>% na.omit()
impacto <- CausalImpact( data = grupo_controle, pre.period = periodo.pre, post.period = periodo.pos )
plot(impacto)
summary(impacto)
summary(impacto, "report")
) %>% na.omit()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("tibbletime")
rmarkdown::render_site()
install.packages("GPareto")
rmarkdown::render_site()
install.packages("nsga2R")
rmarkdown::render_site()
install.packages("intergraph")
rmarkdown::render_site()
install.packages("ggnetwork")
rmarkdown::render_site()
install.packages("netrankr")
rmarkdown::render_site()
install.packages("ITNr")
rmarkdown::render_site()
install.packages("vembedr")
rmarkdown::render_site()
install.packages("radiant")
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("rstanarm")
rmarkdown::render_site()
install.packages("psy")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("TSstudio")
rmarkdown::render_site()
install.packages("nonlinearTseries")
rmarkdown::render_site()
install.packages("tsbox")
rmarkdown::render_site()
install.packages("funtimes")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("ggPredict")
rmarkdown::render_site()
install.packages("ggPredict")
rmarkdown::render_site()
devtools::install_github("cardiomoon/ggiraphExtra")
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("wooldridge")
rmarkdown::render_site()
rmarkdown::render_site()
install.packages("rjags")
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
rmarkdown::render_site()
